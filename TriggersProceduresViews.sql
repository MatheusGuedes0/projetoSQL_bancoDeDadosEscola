--VIEWS

--VIEW V_NOTAS_DISCIPLINA
DROP VIEW IF EXISTS V_NOTAS_DISCIPLINA
GO
CREATE VIEW V_NOTAS_DISCIPLINA
AS
SELECT AVG((ISNULL(ATD.NOTA_1,0) + ISNULL(ATD.NOTA_2,0) + ISNULL(ATD.NOTA_3,0) + ISNULL(ATD.NOTA_4,0)) / 4) AS MEDIA,A.NOME AS NOME_DO_ALUNO, D.NOME AS NOME_DA_DISCIPLINA, P.NOME AS NOME_DO_PROFESSOR,T.ID_TURMA
FROM ALUNO A
INNER JOIN ALUNO_TURMA_DISCIPLINA AS ATD ON ATD.NUM_MATRICULA = A.NUM_MATRICULA
INNER JOIN TURMA AS T ON T.ID_TURMA = ATD.ID_TURMA
INNER JOIN  DISCIPLINA AS D ON D.ID_DISCIPLINA = ATD.ID_DISCIPLINA
INNER JOIN PROFESSOR AS P ON P.CPF = D.CPF_PROFESSOR
GROUP BY A.NOME, D.NOME,P.NOME, T.ID_TURMA

SELECT * FROM V_NOTAS_DISCIPLINA

--VIEW V_FALTA_ALUNOS
DROP VIEW IF EXISTS V_FALTA_ALUNOS
GO
CREATE VIEW V_FALTA_ALUNOS
AS 
SELECT D.NOME, A.NOME AS NOMEALUNO, SUM(F.NUMERO_FALTAS) AS NUMERO_TOTAL_FALTAS, CONCAT(ROUND(SUM(CAST(F.NUMERO_FALTAS AS FLOAT) * 100) / CAST(D.CARGA_HORARIA AS FLOAT), 2),'%') AS PORCENTAGEM_FALTAS FROM DISCIPLINA D
INNER JOIN ALUNO_TURMA_DISCIPLINA ATD ON ATD.ID_DISCIPLINA = D.ID_DISCIPLINA
INNER JOIN FREQUENCIA F ON F.ID_ALUNO_TURMA_DISCIPLINA = ATD.ID_ALUNO_TURMA_DISCIPLINA
INNER JOIN ALUNO A ON A.NUM_MATRICULA = F.NUM_MATRICULA
GROUP BY D.NOME, A.NOME, D.CARGA_HORARIA

SELECT * FROM V_FALTA_ALUNOS

--PROCEDURES CRUD

--SP DE DELETE
CREATE OR ALTER  PROCEDURE SP_DELETE_ALUNOS
(
@NUM_MATRICULA INT
)
AS 
BEGIN
DELETE FROM ALUNO 
WHERE NUM_MATRICULA = @NUM_MATRICULA
END

--SP DE INSERT

CREATE OR ALTER PROCEDURE SP_INSERT_ALUNOS
(
@NOME VARCHAR(50),
@RG VARCHAR(11),
@CPF NUMERIC(11),
@COD_CIDADE INT,
@DATA_NASCIMENTO DATE,
@RUA VARCHAR(30),
@NUMERO INT,
@BAIRRO VARCHAR(30),
@SEXO CHAR(1),
@FILIACAO1 VARCHAR(50),
@FILIACAO2 VARCHAR(50),
@CPF_RESPONSAVEL NUMERIC(11)
)
AS BEGIN
INSERT INTO ALUNO(NOME,RG,CPF,COD_CIDADE,DATA_NASCIMENTO,RUA,NUMERO,BAIRRO,SEXO,FILIACAO_1,FILIACAO_2,CPF_RESPONSAVEL)
VALUES(@NOME,@RG,@CPF,@COD_CIDADE,@DATA_NASCIMENTO,@RUA,@NUMERO,@BAIRRO,@SEXO,@FILIACAO1,@FILIACAO2,@CPF_RESPONSAVEL)
END

--SP DE UPDATE
CREATE  OR ALTER PROCEDURE SP_UPDATE_ALUNO
(
@NUM_MATRICULA INT,
@NOME VARCHAR(50),
@RG VARCHAR(11),
@CPF NUMERIC(11),
@COD_CIDADE INT,
@DATA_NASCIMENTO DATE,
@RUA VARCHAR(30),
@NUMERO INT,
@BAIRRO VARCHAR(30),
@SEXO CHAR(1),
@FILIACAO1 VARCHAR(50),
@FILIACAO2 VARCHAR(50),
@CPF_RESPONSAVEL NUMERIC(11)
)
AS BEGIN
UPDATE ALUNO
SET NOME = @NOME,
RG = @RG,
CPF = @CPF,
COD_CIDADE = @COD_CIDADE,
DATA_NASCIMENTO = @DATA_NASCIMENTO,
RUA = @RUA,
NUMERO =@NUMERO,
BAIRRO =@BAIRRO,
SEXO = @SEXO,
FILIACAO_1 = @FILIACAO1,
FILIACAO_2 =@FILIACAO2,
CPF_RESPONSAVEL = @CPF_RESPONSAVEL
WHERE NUM_MATRICULA = @NUM_MATRICULA
END

--EXEC SP_UPDATE_ALUNO 6, 'WELINTON', '14525233377', 14425533346, 2, '2014-05-13', 'MARIA GORETTI', 3, 'PERPETUO SOCORRO', 'M', 'RAFAEL', 'FERNANDA', 99922233333

--SP DE SELECT

CREATE OR ALTER PROCEDURE SP_SELECT_ALUNO
(
@NUM_MATRICULA INT,
@NOME VARCHAR(50),
@RG VARCHAR(11),
@CPF NUMERIC(11),
@COD_CIDADE INT,
@DATA_NASCIMENTO DATE,
@RUA VARCHAR(30),
@NUMERO INT,
@BAIRRO VARCHAR(30),
@SEXO CHAR(1),
@FILIACAO1 VARCHAR(50),
@FILIACAO2 VARCHAR(50),
@CPF_RESPONSAVEL NUMERIC(11)
)
AS BEGIN 

SELECT NUM_MATRICULA,
NOME,
RG,
CPF,
COD_CIDADE,
DATA_NASCIMENTO,
RUA,
NUMERO,
BAIRRO,
SEXO ,
FILIACAO_1,
FILIACAO_2,
CPF_RESPONSAVEL
FROM ALUNO
WHERE ((@NUM_MATRICULA IS NULL) OR (NUM_MATRICULA = @NUM_MATRICULA))
AND ((@NOME IS NULL) OR (NOME = @NOME))
AND ((@RG IS NULL) OR (RG = @RG))
AND ((@CPF IS NULL) OR (CPF = @CPF))
AND ((@COD_CIDADE IS NULL) OR (COD_CIDADE = @COD_CIDADE))
AND ((@DATA_NASCIMENTO IS NULL) OR (DATA_NASCIMENTO = @DATA_NASCIMENTO))
AND ((@RUA IS NULL) OR (RUA = @RUA))
AND ((@NUMERO IS NULL) OR (NUMERO = @NUMERO))
AND ((@BAIRRO IS NULL) OR (BAIRRO = @BAIRRO))
AND ((@SEXO IS NULL) OR (SEXO = @SEXO))
AND ((@FILIACAO1 IS NULL) OR (FILIACAO_1 = @FILIACAO1))
AND ((@FILIACAO2 IS NULL) OR (FILIACAO_2 = @FILIACAO2))
AND ((@CPF_RESPONSAVEL IS NULL) OR (CPF_RESPONSAVEL  = CPF_RESPONSAVEL ))
END


--SP DE RESPONSAVEL_ALUNO

CREATE OR ALTER PROCEDURE SP_RESPONSAVEL_ALUNO 
(
    @NOME_RESPONSAVEL VARCHAR(50)
) 
AS 
BEGIN
    IF NOT EXISTS (
        SELECT NUM_MATRICULA
        FROM ALUNO A
        INNER JOIN RESPONSAVEL R ON R.CPF = A.CPF_RESPONSAVEL
        WHERE R.NOME = @NOME_RESPONSAVEL
    )
        PRINT 'NÃO EXISTEM ALUNOS VINCULADOS A ESSE RESPONSÁVEL';
    ELSE
        SELECT 
            A.NUM_MATRICULA,
            A.NOME,
            A.RG,
            A.CPF,
            A.COD_CIDADE,
            A.DATA_NASCIMENTO,
            A.RUA,
            A.NUMERO,
            A.BAIRRO,
            A.SEXO ,
            A.FILIACAO_1,
            A.FILIACAO_2,
            A.CPF_RESPONSAVEL
        FROM ALUNO A
        INNER JOIN  RESPONSAVEL R ON R.CPF = A.CPF_RESPONSAVEL
        WHERE R.NOME = @NOME_RESPONSAVEL;
    END




--INSERT INTO RESPONSAVEL(CPF, NOME, RG, TELEFONE, COD_CIDADE, DATA_NASCIMENTO, RUA, NUMERO, BAIRRO)
--VALUES(77725633322, 'CLAUDIA', '66626233322', 49998014875, 2, '1995-05-08', 'RUI BARBOSA' , 4, 'CENTRO')


--SP DE COORDENADOR_TURMA

CREATE OR ALTER PROCEDURE SP_COORNDENACAO_TURMA
( 
@NOME_COORDENACAO VARCHAR(50)
)
AS BEGIN
SELECT T.ID_TURMA, T.NUM_ALUNOS, T.ANO FROM TURMA T
INNER JOIN COORDENACAO C ON C.CPF = T.CPF_COORDENACAO
WHERE C.NOME = @NOME_COORDENACAO
END

EXEC SP_COORNDENACAO_TURMA LUZIA
SELECT * FROM FREQUENCIA

--TRIGGERS DE LOG NA TABELA FREQUENCIA

CREATE TABLE LOG_FREQUENCIA
(
DATA_CHAMADA DATE NOT NULL,
NUM_MATRICULA INT NOT NULL,
NUMERO_FALTAS INT NOT NULL,
ID_ALUNO_TURMA_DISCIPLINA INT NOT NULL,
OPERACAO CHAR(1) NOT NULL,
HORARIO DATETIME NOT NULL,
USUARIO VARCHAR(30) NOT NULL
);

CREATE OR ALTER TRIGGER TG_LOG_FREQUENCIA
ON FREQUENCIA 
FOR DELETE, INSERT, UPDATE
AS
DECLARE @DATA_CHAMADA DATE,
@NUM_MATRICULA INT,
@NUMERO_FALTAS INT,
@ID_ALUNO_TURMA_DISCIPLINA INT
IF EXISTS(SELECT * FROM DELETED) AND EXISTS (SELECT * FROM INSERTED)
BEGIN
SELECT @DATA_CHAMADA = DATA_CHAMADA,
@NUM_MATRICULA = NUM_MATRICULA,
@NUMERO_FALTAS = NUMERO_FALTAS ,
@ID_ALUNO_TURMA_DISCIPLINA = ID_ALUNO_TURMA_DISCIPLINA
FROM DELETED
INSERT INTO LOG_FREQUENCIA
VALUES(@DATA_CHAMADA,@NUM_MATRICULA,@NUMERO_FALTAS, @ID_ALUNO_TURMA_DISCIPLINA,'U',GETDATE(),CURRENT_USER)
SELECT @DATA_CHAMADA = DATA_CHAMADA,
@NUM_MATRICULA = NUM_MATRICULA,
@NUMERO_FALTAS = NUMERO_FALTAS ,
@ID_ALUNO_TURMA_DISCIPLINA = ID_ALUNO_TURMA_DISCIPLINA
FROM INSERTED
INSERT INTO LOG_FREQUENCIA
VALUES(@DATA_CHAMADA,@NUM_MATRICULA,@NUMERO_FALTAS, @ID_ALUNO_TURMA_DISCIPLINA,'U',GETDATE(),CURRENT_USER)
END

IF EXISTS(SELECT * FROM DELETED) AND NOT EXISTS(SELECT * FROM INSERTED)
BEGIN
SELECT @DATA_CHAMADA = DATA_CHAMADA,
@NUM_MATRICULA = NUM_MATRICULA,
@NUMERO_FALTAS = NUMERO_FALTAS ,
@ID_ALUNO_TURMA_DISCIPLINA = ID_ALUNO_TURMA_DISCIPLINA
FROM DELETED
INSERT INTO LOG_FREQUENCIA
VALUES(@DATA_CHAMADA,@NUM_MATRICULA,@NUMERO_FALTAS, @ID_ALUNO_TURMA_DISCIPLINA,'D',GETDATE(),CURRENT_USER)
END
IF NOT EXISTS (SELECT * FROM DELETED) AND EXISTS(SELECT * FROM INSERTED)
BEGIN
SELECT @DATA_CHAMADA = DATA_CHAMADA,
@NUM_MATRICULA = NUM_MATRICULA,
@NUMERO_FALTAS = NUMERO_FALTAS ,
@ID_ALUNO_TURMA_DISCIPLINA = ID_ALUNO_TURMA_DISCIPLINA
FROM INSERTED
INSERT INTO LOG_FREQUENCIA
VALUES(@DATA_CHAMADA,@NUM_MATRICULA,@NUMERO_FALTAS, @ID_ALUNO_TURMA_DISCIPLINA,'I',GETDATE(),CURRENT_USER)
END


--COMANDOS PARA TESTAR A LOG

/*
INSERT INTO FREQUENCIA(DATA_CHAMADA, NUM_MATRICULA, NUMERO_FALTAS, ID_ALUNO_TURMA_DISCIPLINA)
VALUES('2023-03-23', 3, 0, 2)
DELETE FROM FREQUENCIA WHERE NUM_MATRICULA = 3 AND DATA_CHAMADA = '2023-12-23'
UPDATE FREQUENCIA SET NUMERO_FALTAS = 2 WHERE DATA_CHAMADA = '2023-10-10'

SELECT * FROM LOG_FREQUENCIA
*/


--TRIGGER DE LOG NA TABELA RESPONSÁVEL

CREATE TABLE LOG_RESPONSAVEL
(
CPF NUMERIC(11) NOT NULL,
NOME VARCHAR(50) NOT NULL,
RG VARCHAR(11),
TELEFONE NUMERIC(11) NOT NULL,
COD_CIDADE INT NOT NULL,
DATA_NASCIMENTO DATE NOT NULL,
RUA VARCHAR(30) NOT NULL,
NUMERO INT NOT NULL,
BAIRRO VARCHAR(30) NOT NULL,
OPERACAO CHAR(1) NOT NULL,
DATA_OPERACAO DATETIME NOT NULL,
USUARIO VARCHAR(30) NOT NULL
)

CREATE OR ALTER TRIGGER TG_LOG_RESPONSAVEL
ON RESPONSAVEL
FOR DELETE, INSERT, UPDATE
AS 
DECLARE
@CPF NUMERIC(11),
@NOME VARCHAR(50),
@RG VARCHAR(11),
@TELEFONE NUMERIC(11),
@COD_CIDADE INT,
@DATA_NASCIMENTO DATE,
@RUA VARCHAR(30),
@NUMERO INT,
@BAIRRO VARCHAR(30)

IF EXISTS (SELECT * FROM DELETED) AND EXISTS(SELECT * FROM INSERTED)
BEGIN
SELECT 
@CPF = CPF,
@NOME = NOME,
@RG = RG,
@TELEFONE = TELEFONE,
@COD_CIDADE = COD_CIDADE,
@DATA_NASCIMENTO = DATA_NASCIMENTO,
@RUA = RUA,
@NUMERO = NUMERO,
@BAIRRO = BAIRRO
FROM DELETED
INSERT INTO LOG_RESPONSAVEL VALUES(@CPF,@NOME,@RG,@TELEFONE,@COD_CIDADE,@DATA_NASCIMENTO,@RUA,@NUMERO,@BAIRRO,'U', GETDATE(), CURRENT_USER)

SELECT 
@CPF = CPF,
@NOME = NOME,
@RG = RG,
@TELEFONE = TELEFONE,
@COD_CIDADE = COD_CIDADE,
@DATA_NASCIMENTO = DATA_NASCIMENTO,
@RUA = RUA,
@NUMERO = NUMERO,
@BAIRRO = BAIRRO
FROM INSERTED
INSERT INTO LOG_RESPONSAVEL VALUES(@CPF,@NOME,@RG,@TELEFONE,@COD_CIDADE,@DATA_NASCIMENTO,@RUA,@NUMERO,@BAIRRO,'U', GETDATE(),CURRENT_USER)
END

IF EXISTS (SELECT * FROM DELETED) AND NOT EXISTS(SELECT * FROM INSERTED)
BEGIN
SELECT 
@CPF = CPF,
@NOME = NOME,
@RG = RG,
@TELEFONE = TELEFONE,
@COD_CIDADE = COD_CIDADE,
@DATA_NASCIMENTO = DATA_NASCIMENTO,
@RUA = RUA,
@NUMERO = NUMERO,
@BAIRRO = BAIRRO
FROM DELETED
INSERT INTO LOG_RESPONSAVEL VALUES(@CPF,@NOME,@RG,@TELEFONE,@COD_CIDADE,@DATA_NASCIMENTO,@RUA,@NUMERO,@BAIRRO,'D', GETDATE(),CURRENT_USER)
END
IF NOT EXISTS (SELECT * FROM DELETED) AND  EXISTS(SELECT * FROM INSERTED)
BEGIN
SELECT 
@CPF = CPF,
@NOME = NOME,
@RG = RG,
@TELEFONE = TELEFONE,
@COD_CIDADE = COD_CIDADE,
@DATA_NASCIMENTO = DATA_NASCIMENTO,
@RUA = RUA,
@NUMERO = NUMERO,
@BAIRRO = BAIRRO
FROM INSERTED
INSERT INTO LOG_RESPONSAVEL VALUES(@CPF,@NOME,@RG,@TELEFONE,@COD_CIDADE,@DATA_NASCIMENTO,@RUA,@NUMERO,@BAIRRO,'I', GETDATE(),CURRENT_USER)
END


SELECT * FROM LOG_RESPONSAVEL

--COMANDOS DE TESTE DA TABELA LOG_RESPONSAVEL

/*
UPDATE RESPONSAVEL SET COD_CIDADE = 1 WHERE NOME = 'WELINTON'

INSERT INTO RESPONSAVEL(CPF, NOME, RG, TELEFONE, COD_CIDADE, DATA_NASCIMENTO, RUA, NUMERO, BAIRRO)
VALUES(55652233311, 'VANESSA', '4457723331', 49998881229, 1, '1987-11-08', 'DAS OLIVEIRAS' , 79, 'PLANALTO')
DELETE FROM RESPONSAVEL WHERE CPF = 55652233311

*/

--TRIGGER DA TABELA FREQUENCIA

--O BANCO JÁ FOI CRIADO PENSANDO EM TRATAR EXCEÇÕES DE DATAS E MATRICULAS DUPLICADAS.
--SENDO ASSIM, FIZEMOS SOMENTE A SEGUNDA PARTE DOS REQUISITOS DE CRIAÇÃO DA TRIGGER

CREATE OR ALTER TRIGGER TG_PERMITE_FREQUENCIA
ON FREQUENCIA
FOR INSERT ,UPDATE
AS
DECLARE 
@DATA DATE 

SELECT @DATA = DATA_CHAMADA FROM INSERTED

IF DATEPART(DW,@DATA) = 7 OR DATEPART(DW,@DATA) = 1
BEGIN
PRINT 'NÃO É POSSIVEL REGISTRAR CHAMADAS PARA DIAS NÃO LETIVOS!'
ROLLBACK
END
ELSE
BEGIN
PRINT 'CHAMADA REGISTRADA COM SUCESSO!'
END


/*
--TESTE DA TRIGGER

	INSERT INTO FREQUENCIA(DATA_CHAMADA, NUM_MATRICULA, NUMERO_FALTAS, ID_ALUNO_TURMA_DISCIPLINA)
VALUES('2023-11-20', 3, 2, 2)
*/


--TRIGGER NA TABELA ALUNO_TURMA_DISCIPLINA

CREATE OR ALTER TRIGGER TG_ALUNO_TURMA
ON ALUNO_TURMA_DISCIPLINA
FOR INSERT, UPDATE
AS

IF (SELECT COUNT(ID_TURMA) FROM ALUNO_TURMA_DISCIPLINA ATD WHERE ATD.ID_TURMA = (SELECT ID_TURMA FROM INSERTED)) > (SELECT NUM_ALUNOS FROM TURMA T WHERE T.ID_TURMA = (SELECT ID_TURMA FROM INSERTED))
BEGIN
PRINT 'NUMERO MAXIMO DE ALUNOS ATINGIDO'
PRINT 'REGISTRO RECUSADO'
ROLLBACK
END
ELSE
BEGIN
PRINT 'REGISTRO INSERIDO COM SUCESSO!'
END

/*TESTE DA TRIGGER
INSERT INTO ALUNO_TURMA_DISCIPLINA(DATA_MATRICULA, NOTA_1, NOTA_2, NOTA_3, NOTA_4, ID_TURMA, ID_DISCIPLINA, NUM_MATRICULA)
VALUES('2023-01-15', 9.5, 8, NULL, NULL, 2, 2, 2)

UPDATE TURMA SET NUM_ALUNOS = 3 WHERE ID_TURMA = 2

*/